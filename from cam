import cv2
import time
import numpy as np
import matplotlib.pyplot as plt
from darkflow.net.build import TFNet

#defining model options
options = {
    'model': 'cfg/yolo.cfg',
    'load': 'bin/yolo.weights', # trained weights
    'threshold': 0.2,
    'gpu': 1.0
}

tfnet = TFNet(options)

# bounding box colour
colors = [tuple(255 * np.random.rand(3)) for _ in range(10)]

# streaming video from cam
capture = cv2.VideoCapture(0)

# setting video quality
capture.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)

# Define the codec and create VideoWriter object
codec = cv2.VideoWriter_fourcc(*'DIVX')
output = cv2.VideoWriter('output.avi', codec, 60.0, size)

currentFrame = 0
while True:
    stime = time.time()
    # capture frame
    ret, frame = capture.read()
    #predict using yolo
    results = tfnet.return_predict(frame)
    
    if ret:  
      count = 0
      for color, result in zip(colors, results):
          if (label = "person" or "Person" or "PERSON") 
            count +=1
            tl = (result['topleft']['x'], result['topleft']['y'])
            br = (result['bottomright']['x'], result['bottomright']['y'])
            label = result['label']
            confidence = result['confidence']
            
            text = '{}: {:.0f}%'.format(label, confidence * 100)
             # put rectangle around image
            frame = cv2.rectangle(frame, tl, br, color, 5)
            frame = cv2.putText(frame, text, tl, cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 0), 2)
        cv2.imshow('frame', frame)
        print('FPS {:.1f}'.format(1 / (time.time() - stime)))
       
       
       # save as video 
       output.write(frame)
       
       # Saves image of the current frame in jpg file
       name = './data/frame' + str(currentFrame) + str(count) + '.jpg'
       print ('Creating...' + name)
       cv2.imwrite(name, frame)
      
       cv2.imshow(name, frame)
       print('FPS {:.1f}'.format(1 / (time.time() - stime)))
       currentFrame += 1
      
    if cv2.waitKey(1) & 0xFF == ord('q'):
       break

capture.release()
output.release()
cv2.destroyAllWindows()
